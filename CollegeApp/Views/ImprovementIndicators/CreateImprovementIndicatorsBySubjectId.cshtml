@model CollegeApp.Models.ImprovementIndicator.ImprovementIndicator

@{
    ViewBag.Title = "CreateImprovementIndicatorsBySubjectId";
}

@section CssScript
{
    <link href="https://www.jqueryscript.net/css/jquerysctipttop.css" rel="stylesheet" type="text/css">
    <link href="~/Content/hijri/bootstrap-datetimepicker.css" rel="stylesheet" />
}

<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            <strong class="card-title">خطط التحسين</strong>
        </div>
        <div class="card-body">



            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @*@Html.LabelFor(model => model.SubjectId, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <div class="col-md-10">
                        @Html.Hidden("SubjectName", (string)ViewBag.SubjectName, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.Hidden("SubjectId", (string)ViewBag.SubjectId)
                        @Html.ValidationMessageFor(model => model.SubjectId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ImprovementIndicatorName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.ImprovementIndicatorName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ImprovementIndicatorName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CompletionRequirements, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.CompletionRequirements, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CompletionRequirements, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ResponsibleEntity, "الجهة المسئولة", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("ResponsibleEntity", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ResponsibleEntity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SupportingEntity, "الجهة المساندة", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("SupportingEntity", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SupportingEntity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AchievementStandard, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.AchievementStandard, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AchievementStandard, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control hijri-date-default col-md-3" } })
                        @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                    @Html.LabelFor(model => model.ImprovementIndicatorStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ImprovementIndicatorStatus, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ImprovementIndicatorStatus, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Notes, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.InitiativeScopeId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("InitiativeScopeId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.InitiativeScopeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
            }

            <div>
                @Html.ActionLink(CollegeApp.Resource.Resource.Back, "GetImprovementIndicatorsBySubjectId", "ImprovementIndicators", new { Id = ViewBag.SubjectId }, null)
            </div>


        </div>
    </div>
</div>

@section scripts
{
    <script src="~/Scripts/hijri/popper.min.js"></script>
    <script src="~/Scripts/hijri/moment-hijri.min.js"></script>
    <script src="~/Scripts/hijri/bootstrap-hijri-datepicker.js"></script>
    <script type="text/javascript">


        $(function () {

            initHijrDatePicker();

            initHijrDatePickerDefault();

            $('.disable-date').hijriDatePicker({

                minDate: "2020-01-01",
                maxDate: "2021-01-01",
                viewMode: "years",
                hijri: true,
                debug: true
            });

        });

        function initHijrDatePicker() {

            $(".hijri-date-input").hijriDatePicker({
                locale: "ar-sa",
                format: "DD-MM-YYYY",
                hijriFormat: "iYYYY-iMM-iDD",
                dayViewHeaderFormat: "MMMM YYYY",
                hijriDayViewHeaderFormat: "iMMMM iYYYY",
                showSwitcher: true,
                allowInputToggle: true,
                showTodayButton: false,
                useCurrent: true,
                isRTL: false,
                viewMode: 'months',
                keepOpen: false,
                hijri: false,
                debug: true,
                showClear: true,
                showTodayButton: true,
                showClose: true
            });
        }

        function initHijrDatePickerDefault() {

            $(".hijri-date-default").hijriDatePicker({
                locale: "ar-sa",
                format: "DD-MM-YYYY",
                hijriFormat: "iYYYY-iMM-iDD",
                dayViewHeaderFormat: "MMMM YYYY",
                hijriDayViewHeaderFormat: "iMMMM iYYYY",
                showSwitcher: false,
                allowInputToggle: false,
                showTodayButton: false,
                useCurrent: true,
                isRTL: true,
                viewMode: 'months',
                keepOpen: false,
                hijri: true,
                debug: true,
                showClear: true,
                showTodayButton: true,
                showClose: true

            });
        }

    </script>
}
